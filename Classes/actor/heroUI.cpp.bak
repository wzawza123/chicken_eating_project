//
//  heroUI.cpp
//  PUBG
//
//  Created by PC1 on 2021/5/23.
//

#include "heroUI.h"
/*
bool HeroUI::init()
{
    auto visibleSize = Director::getInstance()->getVisibleSize();//实际窗口尺寸
    Vec2 origin = Director::getInstance()->getVisibleOrigin();//偏移值
    
 //UI
 //血条
 
 auto healthImg = Sprite::create("HealthImg.png");
 healthImg->setPosition(visibleSize.width/4,visibleSize.height/8);
 this->addChild(healthImg, 2);

 //测试数据
 int sHealthPoint=60;
 int maxHealthPoint=100;
 
 auto sliderTrack1 = Sprite::create("SliderTrack.png");
 sliderTrack1->setPosition(visibleSize.width/2,visibleSize.height/8);
 this->addChild(sliderTrack1, 1);
 
 auto pHealth = ProgressTimer::create(Sprite::create("HealthBar.png"));
 pHealth->setPosition(visibleSize.width/2, visibleSize.height / 8);
 pHealth->setType(ProgressTimer::Type::BAR);
 pHealth->setMidpoint(Point(0, 0.5));
 pHealth->setBarChangeRate(Point(1, 0));
 pHealth->setPercentage(static_cast<float>(sHealthPoint)
     / static_cast<float>(maxHealthPoint) * 100);
 this->addChild(pHealth,2);
 
 //护甲条
 auto armorImg = Sprite::create("ArmorImg.png");
 armorImg->setPosition(Point(visibleSize.width/4,visibleSize.height/16));
 this->addChild(armorImg, 2);

 //测试数据
 int sArmorPoint=80;
 int maxArmorPoint=100;
 
 auto sliderTrack2 = Sprite::create("SliderTrack.png");
 sliderTrack2->setPosition(visibleSize.width/2,visibleSize.height/16);
 this->addChild(sliderTrack2, 1);
 
 auto pArmor = ProgressTimer::create(Sprite::create("ArmorBar.png"));
 pArmor->setPosition(origin.x + visibleSize.width/2, visibleSize.height / 16);
 pArmor->setType(ProgressTimer::Type::BAR);
 pArmor->setMidpoint(Point(0, 0.5));
 pArmor->setBarChangeRate(Point(1, 0));
 pArmor->setPercentage(static_cast<float>(sArmorPoint)
     / static_cast<float>(maxArmorPoint) * 100);
 this->addChild(pArmor,2);
 
 
 //子弹1
 auto bulletType1 = ui::Scale9Sprite::create("BulletType1.png");
 if(bulletType1 == nullptr)
 {
     problemLoading("'BulletType1.png'");
 }
 else
 {
     //bulletType1->setCapInsets(Rect(6, 6, 79, 61));
     //bulletType1->setContentSize(Size(300, 200));
     bulletType1->setPosition(origin.x + visibleSize.width/30, visibleSize.height / 4);
     this->addChild(bulletType1, 1);
     //测试数据
     int pBullet1=30;
     int maxBullet1=100;
     std::string bullet1Message = std::to_string(pBullet1) + "/" +
             std::to_string(maxBullet1);
     auto pBullet1Message = Label::createWithTTF(bullet1Message, "IRANYekanBold.ttf", 18.f);
     pBullet1Message->setPosition(visibleSize.width/8, visibleSize.height / 4);
     this->addChild(pBullet1Message, 3);
 }
 
 
 //子弹2
 auto bulletType2 = ui::Scale9Sprite::create("BulletType2.png");
 if(bulletType2 == nullptr)
 {
     problemLoading("'BulletType2.png'");
 }
 else
 {
     //bulletType1->setCapInsets(Rect(6, 6, 79, 61));
     //bulletType1->setContentSize(Size(300, 200));
     bulletType2->setPosition(origin.x + visibleSize.width/30, visibleSize.height / 4-visibleSize.height/15);
     this->addChild(bulletType2, 0);
     //测试数据
     int pBullet2=40;
     int maxBullet2=100;
     std::string bullet2Message = std::to_string(pBullet2) + "/" +
             std::to_string(maxBullet2);
     auto pBullet2Message = Label::createWithTTF(bullet2Message, "IRANYekanBold.ttf", 18.f);
     pBullet2Message->setPosition(visibleSize.width/8, visibleSize.height / 4-visibleSize.height/15);
     this->addChild(pBullet2Message, 3);
 }
 
 //子弹3
 auto bulletType3 = ui::Scale9Sprite::create("BulletType3.png");
 if(bulletType3 == nullptr)
 {
     problemLoading("'BulletType3.png'");
 }
 else
 {
     //bulletType1->setCapInsets(Rect(6, 6, 79, 61));
     //bulletType1->setContentSize(Size(300, 200));
     bulletType3->setPosition(origin.x + visibleSize.width/30, visibleSize.height / 4-2*visibleSize.height/15);
     this->addChild(bulletType3, 0);
     //测试数据
     int pBullet3=50;
     int maxBullet3=100;
     std::string bullet3Message = std::to_string(pBullet3) + "/" +
             std::to_string(maxBullet3);
     auto pBullet3Message = Label::createWithTTF(bullet3Message, "IRANYekanBold.ttf", 18.f);
     pBullet3Message->setPosition(visibleSize.width/8, visibleSize.height / 4-2*visibleSize.height/15);
     this->addChild(pBullet3Message, 3);
 }
 
 //子弹4
 auto bulletType4 = ui::Scale9Sprite::create("BulletType4.png");
 if(bulletType4 == nullptr)
 {
     problemLoading("'BulletType4.png'");
 }
 else
 {
     //bulletType1->setCapInsets(Rect(6, 6, 79, 61));
     //bulletType1->setContentSize(Size(300, 200));
     bulletType4->setPosition(origin.x + visibleSize.width/30, visibleSize.height / 4-3*visibleSize.height/15);
     this->addChild(bulletType4, 0);
     //测试数据
     int pBullet4=80;
     int maxBullet4=100;
     std::string bullet4Message = std::to_string(pBullet4) + "/" +
             std::to_string(maxBullet4);
     auto pBullet4Message = Label::createWithTTF(bullet4Message, "IRANYekanBold.ttf", 18.f);
     pBullet4Message->setPosition(visibleSize.width/8, visibleSize.height / 4-3*visibleSize.height/15);
     this->addChild(pBullet4Message, 3);
 }
 
 //UI更新函数
 schedule(CC_SCHEDULE_SELECTOR(SingleModeRuntime::scheduleUI), 0.1f);
}
 
 //UI更新函数
 void SingleModeRuntime::scheduleUI(float dt)
 {
     
     if (sHealthPoint != hero::pHealthPoint)
     {
         sHealthPoint = hero::pHealthPoint;
         pHealth->setPercentage(static_cast<float >(sHealthPoint)
                                  / static_cast<float >(sHealthPoint) * 100);
         std::string healthMessage = std::to_string(sHealthPoint) + "/" +
                 std::to_string(maxHealthPoint);
     }

     if (sArmorPoint != hero::pDefencePoint)
     {
         sArmorPoint = hero::pDefencePoint;
         pArmor->setPercentage(static_cast<float >(sArmorPoint)
                                / static_cast<float >(sArmorPoint) * 100);
         std::string armorMessage = std::to_string(sArmorPoint) + "/" +
                 std::to_string(maxArmorPoint);
     }
 }

*/


